program = _{ SOI ~ "\n"* ~ (stmt ~ "\n"*) * ~ stmt? ~ EOI }

COMMENT = _{ lineComment | blockComment }
    lineComment = _{"//" ~ (!"\n" ~ ANY)*}
    blockComment = _{ "/*" ~ (blockComment | !"*/" ~ ANY)* ~ "*/" }

stmt = _{
    assgmtExpr |
    declStmt |
    curryCall |
    functionCall
}

expr = {
    curryCall|
    functionCall |
    isExpr |
    infixExpr
}

// TODO
curryCall = {functionCall ~ ("(" ~ exprList? ~ ")")+}

functionCall = { functionCaller? ~ ident ~ "(" ~ exprList? ~ ")"}
    functionCaller = {(ident ~ ".")+}
    exprList = { expr ~ ("," ~ expr)*}

rValue = _{ decimal | integer | string | boolean | ident }
infixExpr = {rValue ~ (infixChar ~ expr)?}
isExpr  = {infixExpr ~ "is" ~ ident}
infixChar = @{"+"|"-"|"*"|"/"|"^"|">"|"<"|"=="|"!="}
// infixExpr = {rValue ~ (infixChar ~ rValue)*}

typeNotation = {":" ~ ident}

assgmtExpr = { ident ~ ("=" ~ expr)+ }

declStmt = { modifier ~ ident ~ typeNotation? ~ "=" ~ expr}
    modifier = {("var"|"val")}

integer = @{ ASCII_DIGIT+ }
decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~("f"|"F")? }
ident = @{ ("`"~regularPart~"`") | regularPart  }
    regularPart = _{(ASCII_ALPHA | "_") ~ (ASCII_DIGIT|ASCII_ALPHA | "_")*}
string = @{ "\"" ~ inner ~ "\"" }
boolean = @{"false"|"true"}
inner = _{ char* }
char = _{
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "a")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

WHITESPACE = _{ " " | "\t" }
