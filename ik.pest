program = _{ SOI ~ block ~ NEWLINE? ~ EOI }
    block = _{NEWLINE* ~ (stmt ~ NEWLINE*) *}
COMMENT = _{ lineComment | blockComment }
    lineComment = _{"//" ~ (!"\n" ~ ANY)*}
    blockComment = _{ "/*" ~ (blockComment | !"*/" ~ ANY)* ~ "*/" }

stmt = _{
    assignExpr |
    declStmt |
    curryCall |
    functionCall |
    functionDecl
}

expr = {
    curryCall|
    functionCall |
    isExpr |
    infixExpr
}

// TODO
curryCall = {functionCall ~ ("(" ~ exprList? ~ ")")+}

functionCall = { functionCaller? ~ ident ~ "(" ~ exprList? ~ ")"}
    functionCaller = {(ident ~ ".")+}
    exprList = { expr ~ ("," ~ expr)*}

rValue = _{ decimal | integer | string | boolean | ident }
infixExpr = {rValue ~ (infixChar ~ expr)?}
isExpr = {infixExpr ~ "is" ~ ident}
infixChar = @{"+"|"-"|"*"|"/"|"^"|">"|"<"|"=="|"!="}
// infixExpr = {rValue ~ (infixChar ~ rValue)*}

typeNotation = {":" ~ ident}

assignExpr = { ident ~ ("=" ~ expr)+ }

declStmt = { modifier ~ ident ~ typeNotation? ~ "=" ~ expr}
    modifier = {("var"|"val")}

functionDecl = {"fun" ~ typeParameters? ~ (receiverType?~ ".")? ~ ident ~ ("(" ~ paramList? ~ ")") ~
    functionBody/*block*/ | functionExpr
}
    functionBody = {"{" ~ block ~ "}"}
    functionExpr = {" = " ~ expr}
    paramList = {typeParameter*}
    receiverType = _{parenthesizedType | nullableType | typeReference}
    typ = {nullableType|parenthesizedType|typeReference} /*type*/
        typeParameters = _{ "<" ~ typeParameter ~ ("," ~ typeParameter )* ~ ">"}
        typeParameter = _{ident ~ (":" ~ typ)?}
        parenthesizedType = _{"(" ~ typ ~ ")"}
        nullableType = _{(typeReference|parenthesizedType)~"?"+}

    typeReference = _{userType}
        userType = _{ simpleUserType ~ ("." ~ simpleUserType)*}
        simpleUserType = _{ident ~ typeArguments?}
        typeArguments = _{"<" ~ typeProjection ~ ("," ~ typeProjection)* ~">"}
        typeProjection =_{ typ | "*"}

integer = @{ ASCII_DIGIT+ }
decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ ("f"|"F")? }
ident = @{ _ident~("."~_ident)* }
    _ident = _{("`" ~ unescaped ~ "`") | regularPart}
    unescaped = _{ (simpleChar | ASCII_DIGIT | singleChar )*} // but Kotlin doesn't support an indentifier with `:`
    simpleChar = _{ "!" | '#'..'/'/*35-47*/ | '<'..'?'/*58-63*/ | '['..'^' | '{'..'~'}
    regularPart = _{ singleChar ~ ( ASCII_DIGIT | singleChar)*}
    singleChar = _{ASCII_ALPHA | "_"| unicode}
// unicode = _{ '\u{2e80}'..'\u{fe4f}' } // chinese
    unicode = _{ '\u{00A0}'..'\u{ffff}' }
string = @{ "\"" ~ inner ~ "\"" }
boolean = @{"false"|"true"}
inner = _{ char* }
char = _{
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "a")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

WHITESPACE = _{ " " | "\t" }
